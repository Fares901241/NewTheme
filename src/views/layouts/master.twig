{# ############## Shared Variables in all views ################
| Variable                                           | Type     | Description                                                                                              |
|----------------------------------------------------|----------|----------------------------------------------------------------------------------------------------------|
| store                                              | Store    |                                                                                                          |
| store.id                                           | int      |                                                                                                          |
| store.name                                         | string   |                                                                                                          |
| store.username                                     | string   |                                                                                                          |
| store.description                                  | string   |                                                                                                          |
| store.slogan                                       | ?string  | * if feature in twilight.json                                                                            |
| store.logo                                         | string   |                                                                                                          |
| store.url                                          | string   |                                                                                                          |
| store.api                                          | string   | the api url for current store                                                                            |
| store.icon                                         | string   | *fav icon url                                                                                            |
| store.contacts                                     | object   | [mobile, phone, email, whatsapp, telegram], ex. store.contacts.email                                     |
| store.social                                       | object   | [instagram, snapchat, twitter, youtube, facebook, pinterest, maroof, whatsapp], ex. store.social.twitter |
| store.settings                                     | object   |                                                                                                          |
| store.settings.auth.email_allowed                  | bool     |                                                                                                          |
| store.settings.auth.mobile_allowed                 | bool     |                                                                                                          |
| store.settings.auth.is_email_required              | bool     |                                                                                                          |
| store.settings.cart.apply_coupon_enabled           | bool     | Does visitor allowed to applay coupon in cart page                                                       |
| store.settings.product.total_sold_enabled          | bool     |                                                                                                          |
| store.settings.product.fit_type                    | ?string  | null when equal product card size is off, or ['cover', 'contain']                                        |
| store.settings.category.testimonial_enabled        | bool     | Show random testimonials in category page                                                                |
| store.settings.tax.number                          | ?string  |                                                                                                          |
| store.settings.tax.certificate                     | ?string  | certificate image url                                                                                    |
| store.settings.tax.taxable_prices_enabled          | bool     | Does tax included in the prices ex product_price 100 & tax is 15, price will be 115                      |
| store.settings.rating_enabled                      | bool     | Is one of: store_enabled or shipping_enabled or products_enabled                                         |
| store.settings.arabic_numbers_enabled              | bool     | Does the merchant wants the numbers to be shown as Arabic format                                         |
| store.settings.is_multilingual                     | bool     |                                                                                                          |
| store.settings.currencies_enabled                  | bool     |     
| theme                                              | Theme    |                                                                                                          |
| theme.id                                           | int      |                                                                                                          |
| theme.name                                         | string   |                                                                                                          |
| theme.mode                                         | string   | `live`, `preview`                                                                                        |
| theme.is_rtl                                       | bool     |                                                                                                          |
| theme.translations_hash                            | int      | to be used in case merchant updated frontend store translations                                          |
| theme.color                                        | object   |                                                                                                          |
| theme.color.primary                                | string   |                                                                                                          |
| theme.color.text                                   | string   | suitable text color comparing to `theme.primary.color`, #000000, #FFFFFF                                 |
| theme.color.reverse_primary                        | string   |                                                                                                          |
| theme.color.reverse_text                           | string   | if `theme.text_color=#000000` means that `theme.reverse_text_color=#FFFFFF`                              |
| theme.color.is_dark                                | bool     | Does main store color `theme.primary.color` considered as dim color?                                     |
| theme.color.darker(float alpha, ?string hexColor)  | string   | get darker color from `theme.primary.color` or from passed color, `alpha` range from 0.0-1.0             |
| theme.color.lighter(float alpha, ?string hexColor) | string   | get lighter color from `theme.primary.color` or from passed color, `alpha` range from 0.0-1.0            |
| theme.font                                         | ?object  | Salla predefined font, null when the theme doesn't have `fonts` feature                                  |
| theme.font.name                                    | string   | DINNextLTArabic-Regular, Amazon-Ember, Apple, Dubai, Estedad                                             |
| theme.font.url                                     | string   | css full url ex: 'https://my_store.test/dist/fonts/default.css'                                          |
| theme.settings                                     | object   | dynamic object with values of the `settings` in twilight.json ex. `theme.settings.topnav_is_dark`        |
| theme.settings.set(settingName, value)             | string   | set global var, then get it {{theme.settings.get('my_var','fallback') }}                                 |
| theme.settings.get(settingName, default=null)      | mixed    | get theme setting ex `theme.settings.get('my_var', 'fallback')`                                          |
#}
<!DOCTYPE html>
<html lang="{{ user.language.code }}" dir="ltr">
<!-- بسم الله الرحمن الرحيم -->
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    {{ theme.settings.set('placeholder', 'images/placeholder.png') }}

    <!-- Start Bootstrap -->

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    
    <link rel="stylesheet" src=""/>
    <!-- End Bootstrap -->

    <!-- To eliminate all render blocking CSS & JS and start with the critical css-->
    <!-- To show loader to the user till the page content are  loaded-->
    <style>
      .loader-init {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          display: flex;
          align-items: center;
          justify-content: center;
          background: white;
          transition: opacity 0.75s, visibility 0.75s;
          z-index: 9999;
      }

      .loader-init--hidden {
          opacity: 0;
          visibility: hidden;
      }

      .loader-init::after {
          content: "";
          width: 36px;
          height: 36px;
          border: 3px solid #eee;
          border-top-color: #5bd5c4;
          border-radius: 50%;
          animation: loading 0.75s ease infinite;
      }

      @keyframes loading {
          from {
            transform: rotate(0turn);
          }
          to {
            transform: rotate(1turn);
          }
      }
    </style>

    <script>
      window.addEventListener("load", () => {
        const loader = document.querySelector(".loader-init");
        loader.classList.add("loader-init--hidden");
        loader.addEventListener("transitionend", () => {
		  if (!document.querySelector(".loader-init")) return;
          document.body.removeChild(loader);
          });
      });
    </script>
  
    <script defer src="{{ 'product-card.js'| asset }}"></script>
    <script defer src="{{ 'main-menu.js'| asset }}"></script>

    <script data-cfasync="false">
        window.header_is_sticky = "{{theme.settings.get('header_is_sticky', 'Default Value')}}"
        window.imageZoom = "{{theme.settings.get('imageZoom')}}"
    </script>
    
    {% hook 'head:start' %}
    {% hook head %}
    {% block styles %}{% endblock %}
    <link rel="stylesheet" href="{{ 'app.css' | asset }}">
    <link rel="stylesheet" href="{{ theme.font.path|cdn }}"/>
    <link rel="stylesheet" href="{{ 'fonts/sallaicons.css'|cdn }}"/>
    
    <style>
        :root {
            --font-main: '{{theme.font.name}}';
            --color-primary: {{ theme.color.primary }};
            --color-primary-dark: {{ theme.color.darker(0.15) }};
            --color-primary-light: {{ theme.color.lighter(0.15) }};
            --color-primary-reverse: {{ theme.color.reverse_text }};
        }
    </style>

      <style>
        {# <!-- Start Navbar --> #}
        @keyframes slideDown {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideUp {
        from { opacity: 1; transform: translateY(0); }
        to { opacity: 0; transform: translateY(-10px); }
        }

        .dropdown-menu {
        transform-origin: top;
        display: none;
        transition: transform 0.5s ease, opacity 0.5s ease; 
        }

        .dropdown-menu.show {
        animation: slideDown 0.5s ease forwards;
        }

        .dropdown-menu.hide {
        animation: slideUp 0.5s ease forwards;
        }  


        .dropdown-item{
            color: white;
        }

        @media screen and (max-width: 590px) {
            .sch{
                width: 35px !important;
            }
            #dropdownMenuButton{
                width: 100%;
            }
            .mglass{
                left:60%
            }
        }

        @media screen and (min-width: 591px) and (max-width: 767px) {
            .sch{
                width: 50px !important;
            }
            #dropdownMenuButton{
                width: 100%;
            }
            .mglass{
                left:65%
            }
        } 

        @media screen and (min-width: 768px) and (max-width: 991px) {
            .sch{
                width: 100px !important;
            }
            #dropdownMenuButton{
                width: 100%;
            }
            .mglass{
                left:75%
            }
        } 

        @media screen and (min-width: 768px) and (max-width: 1206px) {
            .sch{
                width: 150px !important;
            }
        }

        @media screen and (min-width: 1207px) and (max-width: 4000px) {
            .sch{
                width: 300px !important; 
            }
        }

        .onhov:hover{
            background-color: white !important;
            color: rgb(13, 110, 253) !important;
            cursor: pointer;
        }

        .onhov:hover i{
            color: rgb(13, 110, 253) !important;
            cursor: pointer;
        }

        .input:focus, input:hover {
            outline: none;
            border-color: rgb(13, 110, 253);
            background-color: #fff;
            box-shadow: 0 0 0 5px rgb(13 110 253 / 30%);
        }

        .hbtn {
            border: unset;
            border-radius: 15px;
            z-index: 1;
            background: rgb(13, 110, 253);
            color: white;
            position: relative;
            border-radius: 2em;
            -webkit-box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
            box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
            transition: all 250ms;
            overflow: hidden;
        }

        .hbtn::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 0;
        border-radius: 15px;
        background-color: rgb(18, 47, 90);
        color: white;
        z-index: -1;
        -webkit-box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
        box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
        transition: all 250ms
        }

        .hbtn:hover {
        color: white;
        }

        .hbtn:hover::before {
        width: 100%;
        }

        .hbtn:active {
        color: white;
        } 
        {# <!-- End Navbar --> #}
        {# Start Filter #}
        .fcta {
        font-size: 12px;
        color: black;
        font-family: inherit;
        cursor: pointer;
        position: relative;
        border: none;
        background: none;
        text-transform: uppercase;
        transition-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1);
        transition-duration: 400ms;
        transition-property: color;
        }
        
        .fcta:focus,
        .fcta:hover {
            color: rgb(13, 110, 253);
        }
        
        .fcta:focus:after,
        .fcta:hover:after {
            width: 100%;
            left: 0%;
        }
        
        .fcta:after {
            content: "";
            pointer-events: none;
            bottom: -2px;
            left: 50%;
            position: absolute;
            width: 0%;
            height: 2px;
            background-color: rgb(13, 110, 253);
            transition-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1);
            transition-duration: 400ms;
            transition-property: width, left;
        }
        {# End Filter #}
        
        {# Start HomeSlider #}

             .carousel-header {
            transition: transform 2s ease-in-out;
            }

            .carousel-header img {
            animation: zoom 10s infinite;
            }

            @keyframes zoom {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
            }

            100% {
                transform: scale(1);
            }
            }

            {# .cimg{
            height: 450px !important;
            } #}

            .ccp-header,
            .ccn-header {
            width: 30px;
            height: 30px;
            background-color: rgba(255, 255, 255, 0.5);
            border-radius: 50%;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            position: absolute;
            right: 10px;
            transform: translateY(-50%);
            }

            .ccp-header {
            top: calc(50% + 5px);
            right: 15px;
            left: auto;
            }

            .ccn-header {
            top: calc(50% - 35px);
            right: 15px;
            left: auto;
            }

            .ccp-header i,
            .ccn-header i {
            font-size: 16px;
            color: #fff;
            }

            .ccp-header:hover,
            .ccn-header:hover {
            background-color: rgba(248, 249, 250, 0.3);
            opacity: 1;
            }

            @media screen and (max-width: 600px){
                .cimg{
                    object-fit: contain;
                }
            }

        {# End HomeSlider #}

        {# Start Image Slider #}

            .slider-container {
            position: relative;
            }

            .custom-carousel {
                overflow: hidden;
            }

            .custom-carousel-images {
                display: flex;
                flex-wrap: nowrap;
                transition: transform 0.5s ease;
            }

            .image-item {
                flex: 0 0 auto;
                width: 12.5%;
                height: 200px;
                text-align: center;
            }

            .image-item .first-slider-img {
                width: 90%;
                height: 75%;
                object-fit: cover;
                padding: 4px;
                border: 1px solid #515151;
                border-radius: 5px;
            }

            .image-title {
                display: block;
                margin-top: 8px;
                font-size: 1rem;
                color: #333;
            }

            .custom-prev-button,
            .custom-next-button {
                position: absolute;
                top: 40%;
                transform: translateY(-50%);
                z-index: 2;
            }

            .custom-prev-button {
                left: -5%;
            }

            .custom-next-button {
                right: -5%;
            }


            @media (min-width: 768px) and (max-width: 991px) {

                .image-item {
                width: 20%;
                }
            }

            @media (max-width: 767px) {

                .custom-next-button,
                .custom-prev-button {
                background-color: transparent;
                border: none
                }

                .custom-next-button {
                right: 25px;
                }

                .custom-prev-button {
                left: 25px;
                }

                .image-item {
                width: 33.33%;
                }
            }

            @media (max-width: 576px) {

                .image-item {
                width: 50%;
                }
            }

        {# End Image Slider #}
      </style>

    {# tracking services, custom css feature. #}
    {% hook 'head:end' %}
</head>
<body id="app" class="overflow-x-hidden {% hook 'body:classes' %}
  {{ theme.settings.get('footer_is_dark') ? ' footer-is-dark' : ' footer-is-light' }}
  {{ theme.settings.get('topnav_is_dark') ? ' topnav-is-dark' : '' }}
  {{ theme.settings.get('sticky_add_to_cart') ? ' is-sticky-product-bar' : '' }}
  ">
  <div class="loader-init"></div>
<noscript>
    To get full functionality of this site you need to enable JavaScript. Here is how
    <a href="https://www.enable-javascript.com/" rel="noreferrer"
       target="_blank">To enable JavaScript on webpage</a>.
</noscript>
<div class="app-inner flex flex-col min-h-full">
    {% hook 'body:start' %}
    {% component 'header.header' %}
    {% block content %}{% endblock %}
    {% component 'footer.footer' %}
</div>
{% hook 'body:end' %}
<script defer src="{{ 'app.js' | asset }}"></script>
<script>
    {# navbar #}
    try {
    document.addEventListener('DOMContentLoaded', function() {
        let dropdownButton = document.getElementById('dropdownMenuButton');
        let dropdownMenu = document.querySelector('.dropdown-menu');
      
        dropdownButton.addEventListener('click', function(event) {
            event.stopPropagation();
            toggleDropdown();
        });
      
        document.addEventListener('click', function(event) {
            let targetElement = event.target;
            if (!dropdownButton.contains(targetElement) && !dropdownMenu.contains(targetElement)) {
                if (dropdownMenu.classList.contains('show')) {
                    toggleDropdown();
                }
            }
        });
      
        function toggleDropdown() {
            dropdownMenu.classList.toggle('show');
        }
    });    
    } catch (error) {
        
    }
    {# end navbar #}

    {# 1st slider #}

    try{
        document.addEventListener('DOMContentLoaded', function () {
        const carousel = document.getElementById('imageCarousel');
        const prevButton = document.querySelector('.custom-prev-button');
        const nextButton = document.querySelector('.custom-next-button');
        const imagesContainer = document.querySelector('.custom-carousel-images');
        const imageItems = document.querySelectorAll('.image-item');
        const ImageCount = document.querySelectorAll('.image-count').length;

        let currentIndex = 0;
        let visibleImages;
        let maxIndex;

        function calculateDimensions() {
            const totalImages = ImageCount;
            const imageWidth =
            imageItems[0].offsetWidth +
            parseInt(getComputedStyle(imageItems[0]).marginLeft) * 2;
            visibleImages = Math.floor(carousel.offsetWidth / imageWidth);
            maxIndex = totalImages - visibleImages;
            updateButtonStates();
        }

        function updateButtonStates() {
            prevButton.disabled = currentIndex === 0;
            nextButton.disabled =
            currentIndex === maxIndex && imageItems.length > visibleImages;
        }

        nextButton.addEventListener('click', () => {
            if (currentIndex < maxIndex) {
            currentIndex++;
            } else {
            currentIndex = 0; // Reset to the first image
            }
            const translateXValue =
            -currentIndex *
            (imageItems[0].offsetWidth +
                parseInt(getComputedStyle(imageItems[0]).marginLeft) * 2);
            imagesContainer.style.transition = 'transform 0.5s ease';
            imagesContainer.style.transform = `translateX(${translateXValue}px)`;
            updateButtonStates();
        });

        prevButton.addEventListener('click', () => {
            if (currentIndex > 0) {
            currentIndex--;
            } else {
            currentIndex = maxIndex; // Set to the last image
            }
            const translateXValue =
            -currentIndex *
            (imageItems[0].offsetWidth +
                parseInt(getComputedStyle(imageItems[0]).marginLeft) * 2);
            imagesContainer.style.transition = 'transform 0.5s ease';
            imagesContainer.style.transform = `translateX(${translateXValue}px)`;
            updateButtonStates();
        });

        window.addEventListener('resize', calculateDimensions);
        calculateDimensions();
        });

    }catch(error){
        
    }

    {# end 1st slider #}
</script>

{# Twilight Components #}
<salla-offer-modal></salla-offer-modal>
<salla-search></salla-search>

{% if user.type=='guest' %}
    <salla-login-modal></salla-login-modal>
{% endif %}
{% block scripts %}{% endblock %}

<!-- Start Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<!-- End Bootstrap -->

</body>
</html>
